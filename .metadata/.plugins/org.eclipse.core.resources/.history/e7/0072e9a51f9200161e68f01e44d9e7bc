package com.example.teste_cross;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import android.app.Activity;
import android.content.Context;
import android.content.ContextWrapper;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.os.Bundle;
import android.util.Log;

import org.opencv.android.BaseLoaderCallback;
import org.opencv.android.LoaderCallbackInterface;
import org.opencv.android.OpenCVLoader;
import org.opencv.android.Utils;
import org.opencv.core.*;
import org.opencv.imgcodecs.Imgcodecs;



public class MainActivity extends Activity {
	private static final String TAG = "UHUL";

	 private BaseLoaderCallback  mLoaderCallback = new BaseLoaderCallback(this) {
	        @Override
	        public void onManagerConnected(int status) {
	            switch (status) {
	                case LoaderCallbackInterface.SUCCESS:
	                {
	                    Log.i(TAG, "OpenCV loaded successfully");
	                } break;
	                default:
	                {
	                    super.onManagerConnected(status);
	                } break;
	            }
	        }
	    };
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		if (!OpenCVLoader.initDebug()) {
	        // Handle initialization error
	    }
		try {
			make1frame();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	
	public void make1frame() throws IOException{
		 Log.i(TAG, "aqui eeeee");
		Bitmap mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.imagem1);
		Bitmap mBitmap2 = BitmapFactory.decodeResource(getResources(), R.drawable.imagem300);
		Bitmap mBitmap3 = BitmapFactory.decodeResource(getResources(), R.drawable.imagem300);		
		
		Mat img1 = new Mat(mBitmap.getHeight(), mBitmap.getWidth(), CvType.CV_8UC3);
		Mat img2 = new Mat(mBitmap2.getHeight(), mBitmap2.getWidth(), CvType.CV_8UC3);
		Mat img3 = new Mat(mBitmap.getHeight(), mBitmap.getWidth(), CvType.CV_8UC3);
		Utils.bitmapToMat(mBitmap, img1);
		Utils.bitmapToMat(mBitmap2, img2);
	
		
		Core.addWeighted(img1, 0.5, img2, 0.5, 0, img3);
		
		Utils.matToBitmap(img3, mBitmap3);
		
		 File file = new File(getFilesDir(), "Resultado.png");
		 OutputStream os = new FileOutputStream(file);
		 Boolean bool = mBitmap3.compress(Bitmap.CompressFormat.PNG, 100, os);
		 os.close();
		 Log.i(TAG, "aqui");
		  

		 if (bool)
			 Log.i(TAG, "SUCCESS writing image to external storage");
		 else
			 Log.i(TAG, "Fail writing image to external storage");
	}
}
	
	



